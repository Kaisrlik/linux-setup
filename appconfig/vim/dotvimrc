set nocompatible              " be iMproved, required by Vundle
filetype off                  " required by Vundle
set t_Co=256                  " 256 colors
set clipboard=unnamedplus     " shared clipboard with the system
syntax on

set encoding=utf-8

"""""
""""" CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("~/.vim/VundlePlugins")

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" A colorful, dark color scheme
Plugin 'nanotech/jellybeans.vim'

" ifugitive.vim: a Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'

" Lean & mean status/tabline for vim that's light as air.
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" integration with tmux (allows running bash commands in tmux splits)
Plugin 'benmills/vimux'

" sharing registers between vims
Plugin 'ardagnir/united-front'

" file manager (^n)
Plugin 'scrooloose/nerdtree'

" home screen (necessary to have a barking dog)
Plugin 'mhinz/vim-startify'

" visualizing marks
Plugin 'kshenoy/vim-signature'

" clever abbreviations and syntax conversion
Plugin 'tpope/vim-abolish'

" snippet completion
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate'
Plugin 'SirVer/ultisnips'

" powerful targeting of text parts
" makes targetting more naturally useful..
Plugin 'wellle/targets.vim'

" allows to replace text without pasting in to a register by gr
" howto: yank od delete something, then past it in by e.g. griw (go replace in
" word) to replace without removing it from register
Plugin 'ReplaceWithRegister'

" automatic function argument reformatting
" mapped to leader+w
Plugin 'foosoft/vim-argwrap'

" python formatting
Plugin 'hynek/vim-python-pep8-indent'

" Multiple cursors
" in visual pres ctrl+n to select next occurance, ctrl+p to go back and ctrl+x
" to skip
Plugin 'terryma/vim-multiple-cursors'

" automatic split resizing for more convenient coding
" Plugin 'roman/golden-ratio'
Plugin 'zhaocai/GoldenView.Vim'

" clever motions helper
Plugin 'unblevable/quick-scope'

" tagbar
Plugin 'majutsushi/tagbar'

" exnading regions of text e.g. brackets, quotes..
Plugin 'terryma/vim-expand-region'

" should make snipmate work together with youcompletme
Bundle 'ervandew/supertab'

" youcompleteme
Plugin 'valloric/youcompleteme'

" syntax checking
" Plugin 'scrooloose/syntastic'

" make ros and vim to be friends
Plugin 'taketwo/vim-ros'

" commenting stuff made easy
Plugin 'tpope/vim-commentary'

" modifying surroundings by "s" target
Plugin 'tpope/vim-surround'

" All of your Plugins must be added before the following line
call vundle#end()            " required by Vundle
filetype plugin indent on    " required by Vundle

"""""
""""" / CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" some color stuff
set background=dark
set cursorline
set cursorcolumn
colorscheme jellybeans

" running airline
set laststatus=2					" allow running without splitting

" should fix colors in tmux
set term=screen-256color

" general vim settings
" more natural splits
set splitbelow
set splitright
"
" set line numbering
set number
"
" indention
set expandtab                   " tab inserts spaces
set shiftwidth=2
set softtabstop=2
set autoindent                  " copy the indention from the last line
set smartindent                 " sometimes indent extra indention
set tabstop=2                   " width of the tab character
set scrolloff=10                " ads cursor margin for the edge of the page
set relativenumber              " turn on relative numbering of lines
"
"
set showmatch                   " brief jump to matching parent
set title
"
" searching and patterns
set ignorecase
set smartcase
set hlsearch
set incsearch

hi Search guibg=LightBlue
hi Search ctermbg=NONE ctermfg=Yellow cterm=bold,underline

" map the leader key
nnoremap , <NOP>
let mapleader = ","

" Switch between relative and absolute line numbers with leader-N
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
  else
    set relativenumber
  endif
endfunc
" nnoremap <leader>n :call NumberToggle()<cr>

" switch :paste mode 
" probably redundant while usingclipboard=unnamedplus
function! TogglePaste()
  if(&paste == 0)
    set paste
  else
    set nopaste
  endif
endfunc
nnoremap <leader>p :call TogglePaste()<cr>

" should fix colors in tmux
set term=screen-256color

" turn on nerd tree if no file is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | wincmd h | endif
let NERDTreeQuitOnOpen=0  " close after opening a file

" CUSTOM Startify settings... TODO: finetune!
autocmd User Startified setlocal cursorline

let g:startify_enable_special         = 1
let g:startify_files_number           = 8
let g:startify_relative_path          = 1
let g:startify_change_to_dir          = 1
let g:startify_update_oldfiles        = 1
let g:startify_session_autoload       = 1
let g:startify_session_persistence    = 1
let g:startify_session_delete_buffers = 1

" should not show up in startify
let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ '/data/repo/neovim/runtime/doc',
      \ '/Users/mhi/local/vim/share/vim/vim74/doc',
      \ ]

" bookmarks in startify
let g:startify_bookmarks = [
      \ { 'b': '~/.bashrc' },
      \ { 'v': '~/.vimrc' },
      \ '~/someotherfile',
      \ ]

" the bottom part of the startify
let g:startify_custom_footer =
      \ ['', "   Pes štěká, kočka mňouká.", '']

hi StartifyBracket ctermfg=240
hi StartifyFile    ctermfg=147
hi StartifyFooter  ctermfg=240
hi StartifyHeader  ctermfg=114
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
hi StartifySpecial ctermfg=240

" map <leader>s to newtab+startify
map <leader>s :tabnew<cr>:Startify<CR>      " run startify 

" turn on menu which suggests files
set wildmenu

" remap tags keys
map <leader>. <c-]>       " dive into the tag
map <leader>/ :pop      " go back one tag
map <leader>; :ts       " show list of files in which the tag is found

" load quotes for startify
source ~/.vim/../startify_quotes.txt

" associate *.launch with xml filetype
au BufRead,BufNewFile *.launch setfiletype xml

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'  

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction    
nnoremap <leader>a :call AutoHighlightToggle()<cr>

" remap split navigations to ctrl + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap tab navigations to alt + hl
map <S-J> :tabn<cr>
map <S-K> :tabp<cr>

" allow the . to execute macro @a once for each line of a visual selection
vnoremap . :normal @a<CR>

" format whole document and return back
nmap <leader>g :normal mggg=G'g<cr>:delmarks g<cr>

" open new tab and run nerdtree
nmap <leader>t :tabedit<cr>:NERDTreeToggle<cr>

" nerd tree toggle binding
" TODO add new shortcut
nnoremap <leader>n :NERDTreeToggle<CR>

abbr /// //////////////////// % ////////////////////<Esc>==f%s<c-o>:call getchar()<CR>

inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {

" no neeeded anymore beacuse of youcompleteme
" " Remap code completion to Ctrl+Space {{{2
" if has("gui_running")
"   " C-Space seems to work under gVim on both Linux and win32
"   inoremap <C-Space> <C-n>
" else " no gui
"   if has("unix")
"     inoremap <Nul> <C-n>
"   else
"     " I have no idea of the name of Ctrl-Space elsewhere
"   endif
" endif

" exclude included files from autocomplete
" set complete-=i

" explicitely set the snipmate version
let g:snipMate = {}
let g:snipMate.snippet_version = 1

" change behavior of enter in completion menu
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" just show the autocomplete menu
set completeopt=longest,menuone

" argumnt wrapping by argwrap
nnoremap <silent> <leader>w :ArgWrap<CR>

" safe deleting things using <leader>d
nmap <leader>d "_d

" quickscope
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" multiple cursors dont exit after hitting escape
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

" line breaking
set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=0
set wrapmargin=0

" remap j and k to move in visal a way, handy when wrapping is set on
nnoremap j gj
nnoremap k gk

" should make goldenration not modify nerd tree
" let g:golden_ratio_exclude_nonmodifiable = 1

" golder view
let g:goldenview__enable_default_mapping = 0

" toggle tagbar
nmap <F8> :TagbarToggle<CR>   

" YouCompleteMe and UltiSnips compatibility, with the helper of supertab
let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']

let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" make ros and youcompleteme be friends
let g:ycm_semantic_triggers = {
\   'roslaunch' : ['="', '$(', '/'],
\   'rosmsg,rossrv,rosaction' : ['re!^', '/'],
\ }

" make backspace work again, ycm have somehow broken it
set backspace=2 " make backspace work like most other apps
set backspace=indent,eol,start

" syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" 
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" 
" let g:syntastic_cpp_checkers=['gcc','clang_check']

" YouCompleteMe
" scrolling in autocomplete menu with j and k
set completeopt+=noinsert
inoremap <expr> j ((pumvisible() && !empty(v:completed_item))?("\<C-n>"):("j"))
inoremap <expr> k ((pumvisible() && !empty(v:completed_item))?("\<C-p>"):("k"))

" let l behave the same as enter in completion menu
inoremap <expr> l ((pumvisible() && !empty(v:completed_item))?("\<C-y>"):("l"))

let g:ycm_filepath_completion_use_working_dir = 1
" let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/default_ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['~/ros_workspace/*']
" let g:ycm_collect_identifiers_from_tags_files = 1

let g:ros_make='current'
let g:ros_build_system='catkin-tools'

" if exists, source .my.vimrc
if !empty(glob("~/.my.vimrc"))
  source ~/.my.vimrc 
endif
