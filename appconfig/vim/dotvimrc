set nocompatible              " be iMproved, required by Vundle
filetype off                  " required by Vundle
set t_Co=256                  " 256 colors
set clipboard=unnamedplus     " shared clipboard with the system
syntax on

set encoding=utf-8

"""""
""""" CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("~/.vim/VundlePlugins")

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" A colorful, dark color scheme
Plugin 'nanotech/jellybeans.vim'

" ifugitive.vim: a Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'

" Lean & mean status/tabline for vim that's light as air.
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" integration with tmux (allows running bash commands in tmux splits)
Plugin 'benmills/vimux'

" sharing registers between multiple instances of vim
Plugin 'ardagnir/united-front'

" file manager (leader+n)
Plugin 'scrooloose/nerdtree'

" home screen (necessary to have a barking dog)
Plugin 'mhinz/vim-startify'

" visualizing marks
" show marks left to line numbers
Plugin 'kshenoy/vim-signature'

" clever abbreviations and syntax conversion
" I want to learn this !!
Plugin 'tpope/vim-abolish'

" snippet completion
" magic!
Plugin 'SirVer/ultisnips'

" snippets for UltiSnips
" not in use, I am cooking my own snippets
" Plugin 'honza/vim-snippets'

" powerful targeting of text parts
" makes targetting more naturally useful..
Plugin 'wellle/targets.vim'

" allows to replace text without pasting in to a register by gr
" howto: yank od delete something, then past it in by e.g. griw (go replace in
" word) to replace without removing it from register
Plugin 'ReplaceWithRegister'

" automatic function argument reformatting
" mapped to leader+w
Plugin 'foosoft/vim-argwrap'

" python formatting
Plugin 'hynek/vim-python-pep8-indent'

" Multiple cursors
" in visual pres ctrl+n to select next occurance, ctrl+p to go back and ctrl+x
" to skip
Plugin 'terryma/vim-multiple-cursors'

" automatic split resizing for more convenient coding
Plugin 'zhaocai/GoldenView.Vim'

" Clever motions helper
" highlights letters while using f, t motions
Plugin 'unblevable/quick-scope'

" Shows tags in the file
" currently mapped to F8
Plugin 'majutsushi/tagbar'

" expading regions of text e.g. brackets, quotes..
" pressing + vill visually select parts of the file... 
" I am thinking about getting rid of this plugin
Plugin 'terryma/vim-expand-region'

" should make ultisnips work together with youcompletme
Bundle 'ervandew/supertab'

" youcompleteme
" automatic code completion for C++ and more
Plugin 'valloric/youcompleteme'

" make ROS and vim to be friends
Plugin 'taketwo/vim-ros'

" commenting stuff made easy
" try gc<motion>
Plugin 'tpope/vim-commentary'

" modifying surroundings by "s" target
" e.g. cs"' changes surrounding quotes
Plugin 'tpope/vim-surround'

" airline extension for tmux
" it colors the tmuxes airline in same colors as in vim
Plugin 'edkolev/tmuxline.vim'

" Latex stuff
Plugin 'lervag/vimtex'

" VimWiki
" Essential part in taking notes in vim
Plugin 'vimwiki/vimwiki'

" ???
Plugin 'MatlabFilesEdition'

" Managing navigation between vim and tmux
" allows to use the same keys (CTRL+hjkl) for smothly navigating between tmux
" and vim panels... its like magic :-)
Plugin 'christoomey/vim-tmux-navigator'

" exchangin of two parts of a file...
" cx{motion} and later cx{motion} swaps the two places
Plugin 'tommcdo/vim-exchange'

" easier manipulation with quickfix window
" [q and ]q to move through the quickfix list
Plugin 'tpope/vim-unimpaired'

" All of your Plugins must be added before the following line
call vundle#end()            " required by Vundle
filetype plugin indent on    " required by Vundle

"""""
""""" / CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" some color stuff
syntax enable
set background=light
colorscheme raggi
" set cursorline
" set cursorcolumn
" hi Search guibg=LightBlue
" hi Search ctermbg=Black ctermfg=Yellow cterm=bold,underline

" should fix colors in tmux
set term=screen-256color

" general vim settings
" more natural splits
set splitbelow
set splitright
"
" set line numbering
set number
"
" indention
set expandtab                   " tab inserts spaces
set shiftwidth=2
set softtabstop=2
set autoindent                  " copy the indention from the last line
set smartindent                 " sometimes indent extra indention
set tabstop=2                   " width of the tab character
set scrolloff=10                " ads cursor margin for the edge of the page
set relativenumber              " turn on relative numbering of lines
"
"
set showmatch                   " brief jump to matching parent
set title
"
" searching and patterns
set ignorecase
set smartcase
set hlsearch
set incsearch

" map the leader key
nnoremap , <NOP>
let mapleader = ","
let maplocalleader = "`"

" Switch between relative and absolute line numbers with leader-N
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
  else
    set relativenumber
  endif
endfunc
" nnoremap <leader>n :call NumberToggle()<cr>

" switch :paste mode 
" probably redundant while usingclipboard=unnamedplus
function! TogglePaste()
  if(&paste == 0)
    set paste
  else
    set nopaste
  endif
endfunc
nnoremap <leader>p :call TogglePaste()<cr>

" should fix colors in tmux
set term=screen-256color

" turn on menu which suggests files
set wildmenu

" remap tags keys
map <leader>. <c-]>       " dive into the tag
map <leader>/ :pop      " go back one tag
map <leader>; :ts       " show list of files in which the tag is found

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction    
nnoremap <leader>a :call AutoHighlightToggle()<cr>

" remap split navigations to ctrl + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap tab navigations to alt + hl
map <S-J> :tabn<cr>
map <S-K> :tabp<cr>

" allow the . to execute macro @a once for each line of a visual selection
vnoremap . :normal @a<CR>

" format whole document and return back
nmap <leader>g :normal mggg=G'g<cr>:delmarks g<cr>

abbr /// //////////////////// % ////////////////////<Esc>==f%s<c-o>:call getchar()<CR>

" inoremap {      {}<Left>
" inoremap {<CR>  {<CR>}<Esc>O
" inoremap {{     {

" change behavior of enter in completion menu
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" just show the autocomplete menu
set completeopt=longest,menuone

" safe deleting things using <leader>d
nmap <leader>d "_d

" line breaking
set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=0
set wrapmargin=0

" better escape
imap <expr> jk (pumvisible()?(empty(v:completed_item)?("<Esc>l"):("\<C-n>\<C-p>")):("\<Esc>l"))

" jumping to head of current function
nnoremap [f mf9[{zt
" nnoremap [b 'fzt

" clever brackets
imap <leader>( ()<Esc>i
imap <leader>{ {}<Esc>i

" clever jumping to first and last character of the line
nmap H ^
nmap L $

" searching for visually selected text
vnoremap // y/<C-R>"<CR>

" compilation
map <Leader>m :w\|silent make\|redraw!\|cc<CR>

" config for airline
source ~/.vim/pluginconfig/vim-airline.vim

" config for startify
source ~/.vim/pluginconfig/vim-startify.vim

" config for nerdtree
source ~/.vim/pluginconfig/nerdtree.vim

" config for vim-argwrap
source ~/.vim/pluginconfig/vim-argwrap.vim

" config for vim-multiple-cursors
source ~/.vim/pluginconfig/vim-multiple-cursors.vim

" config for quick-scope
source ~/.vim/pluginconfig/quick-scope.vim

" config for tagbar
source ~/.vim/pluginconfig/tagbar.vim

" config for GoldenView
source ~/.vim/pluginconfig/GoldenView.vim

" config for youcompleteme
source ~/.vim/pluginconfig/youcompleteme.vim

" config for vim-ros
source ~/.vim/pluginconfig/vim-ros.vim

" config for tmuxline
source ~/.vim/pluginconfig/tmuxline.vim

" config for vimtex
source ~/.vim/pluginconfig/vimtex.vim

" config for VimWiki
source ~/.vim/pluginconfig/vimwiki.vim

" config for UltiSnips
source ~/.vim/pluginconfig/ultisnips.vim

" if exists, source .my.vimrc
if !empty(glob("~/.my.vimrc"))
  source ~/.my.vimrc 
endif
